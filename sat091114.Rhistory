system("R CMD SHLIB *.c -lgeos_c")
dyn.load("rgeos.so")
.Call("rgeos_Init")
library(sp)
p1 <- cbind(x=c(0, 0, 10, 10, 0), y=c(0, 10, 10, 0, 0))
p2 <- cbind(x=c(3, 3, 7, 7, 3), y=c(3, 7, 7, 3, 3))
p3 <- cbind(x=c(20, 20, 30, 30, 20), y=c(20, 30, 30, 20, 20))
Pls <- Polygons(list(Polygon(p1), Polygon(p2), Polygon(p3)), ID="1")
.Call("rgeos_what", Pls)
zz <- .Call("rgeos_what", Pls)
which(zz, arr.ind=TRUE)
containsij <- which(zz, arr.ind=TRUE)
containsij[,2]
1:3 %in% containsij[,2]
eRiR <- as.integer(1:3 %in% containsij[,2])
eRiR
eRiR[containsij[,2]] <- containsij[,1]
eRiR
paste(eRiR, collapse=" ")
comment(Pls) <- paste(eRiR, collapse=" ")
comment(Pls)
?comment
library(maptools)
?checkPolygonsHoles
checkPolygonsHoles
library(maptools)
data(wrld_simpl)
zz <- lapply(slot(wrld_simpl, "polygons"), function(x) .Call("rgeos_PolygonsContain", x))
zz[[1]]
zz[[5]]
library(relations)
install.packages(relations)
install.packages("relations")
library(relations)
?containsij <- which(zz[[5]], arr.ind=TRUE)
containsij <- which(zz[[5]], arr.ind=TRUE)
containsij
containsij <- as.data.frame(which(zz[[5]], arr.ind=TRUE))
containsij
relation(graph=containsij)
R <- relation(graph=containsij)
R
relation_graph(R)
relation_domain(R)
relation_incidence(R)
plot(wrld_simpl[5,])
?relation
plot(R)
plot(as.endorelation(R))
plot(as.endorelation(graph=containsij))
plot(endorelation(graph=containsij))
(endorelation(graph=containsij))
relation_is_injective(R)
relation_is_surjective(R)
relation_is_functional(R)
R
summary(R)
any(containsij[,1] > containsij[,2])
as(containsij, "graphNEL")
as(zz[[5]], "graphNEL")
t1 <- zz[[5]]
 as(t1, "graphNEL")
diag(t1) <- 0
 as(t1, "graphNEL")
t2 <- as(t1, "graphNEL")
summary(t2)
plot(t2)
nodes(t2)
dijkstra.sp(t2)
library(RBGL)
dijkstra.sp(t2)
sapply(zz, length)
t1 <- zz[[30]]
diag(t1) <- 0
t2 <- as(t1, "graphNEL")
dijkstra.sp(t2)
nodes(t2)
t2
t1
dijkstra.sp(t2)
plot(t2)
maxClique(t2)
kCliques(t2)
edgeConectivity(t2)
edgeConnectivity(t2)
connectedComponents(t2)
connectedComp(t2)
sapply(connectedComp(t2), function(x) x > 1)
sapply(connectedComp(t2), function(x) length(x) > 1)
t1 <- zz[[5]]
diag(t1) <- 0
sapply(connectedComp(t2), function(x) x > 1)
t2 <- as(t1, "graphNEL")
sapply(connectedComp(t2), function(x) x > 1)
sapply(connectedComp(t2), function(x) length(x) > 1)
t3 <- connectedComp(t2)
sapply(t3, function(x) length(x) > 1)
t3
johnson.all.pairs(t1)
johnson.all.pairs.sp(t1)
johnson.all.pairs.sp(t2)
connComp(t2)
DFS(t2)
DFS(t2, "1")
DFS(t2, 1)
DFS(t2, "2")
?DFS
dfs(t2, "1")
?dfs
dfs(t2)
bfs(t2)
getMethods("coerce", "graphNEL")
getMethods("coerse", "graphNEL")
library(graph)
getMethods("coerce", "graphNEL")
class(t2)
?"graphNEL-class"
?"graphAM-class"
?"distGraph-class"
sp.between(t2, "1", "2")
sp.between(t2, "1", "3")
?addEdge
t2a <- addEdge("2", "3", t2)
sp.between(t2, "1", "3")
sp.between(t2, "2", "3")
sp.between(t2a, "1", "3")
sp.between(t2a, "2", "3")
sp.between(t2a, "1", "3")
plot(t2)
plot(t2a)
dag.sp(t2a)
johnson.all.pairs.sp(t2a)
tsort(t2a)
transitive.closure(t2a)
plot(transitive.closure(t2a))
plot(transitive.closure(t2))
kCliques(uGraph(t2))
kCliques(ugraph(t2))
kCliques(ugraph(t2a))
kCliques(ugraph(t2))
kCliques(ugraph(t2a))
savehistory("../../sat091114.Rhistory")

system("R CMD SHLIB *.c -lgeos_c")
dyn.load("rgeos.so")
.Call("rgeos_Init")
library(sp)
library(maptools)
data(wrld_simpl)
zz <- lapply(slot(wrld_simpl, "polygons"), function(x) .Call("rgeos_PolygonsConain", x)))
library(graph)
t1 <- zz[[5]]
t2 <- as(t1, "graphNEL")
diag(t1) <- 0
t2 <- as(t1, "graphNEL")
?bfs
library(RBGL)
?bfs
bfa(t2, "1")
bfs(t2, "1")
bfs(t2, "1")
t2a <- addEdge("2", "3", t2)
bfs(t2a, "1")
as(t2a, )
t1
t1 %*% t1
as(t2a, "graphAM")
as(as(t2a, "graphAM"), "matrix")
t3 <- as(as(t2a, "graphAM"), "matrix")
t3
t3 %*% t3
t2b <- addEdge("3", "4", t2a)
t3 <- as(as(t2b, "graphAM"), "matrix")
t3
t2b <- addEdge("2", "4", t2b)
t3 <- as(as(t2b, "graphAM"), "matrix")
t3
t3 %*% t3
t3 %*% t3 %*% t3

k <- 1
cum <- t1
res <- sum(t1)
while (res > 0) {
 cat("res:", res, "k:", k, "\n")
 cum <- cum %*% t1
 res <- sum(cum)
 k <- k+1
}

sum(t1_2 <- t1 %*% t1) > 0

sum(t3_2 <- t3 %*% t3) > 0

comm <- c(0, 1, 1, 0, 4, 0, 0, 7, 0, 0, 0)
comm <- c(0, 4, 1, 0, 1, 0, 0, 7, 0, 0, 0)


w <- which(colSums(lmat) == 0)

wi <- which(lmat[7,])
cwi <- colSums(lmat[wi,wi])
cErs <- wi[which(cwi %% 2 != 0)]

