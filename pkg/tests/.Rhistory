library(rgeos)
test_dir("/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests", SummaryByContextReporter)
library(testthat)
test_dir("/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests", SummaryByContextReporter)
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile) {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(f)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
	nodes = xmlSApply(x,xmlName)#
	#
	#Handle precisionModel nodes - only use the first model#
	test_that("precisionModel attribute tests", {#
	    #
	    pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
	    expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
	    #
    	if (length(pmAttrs) == 1) {#
            type = pmAttrs[["type"]]#
        } else if (length(pmAttrs) == 3) {#
            setScale(as.numeric( pmAttrs[["scale"]] ))#
		#
		    expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
		    expect_that( pmAttrs[["offsety"]], equals("0.0") )#
        } #
    })#
	#
	#Handle case nodes#
    for ( i in which(nodes == "case") ) {#
		caseNodes = xmlSApply(x[[i]],xmlName)#
		#
		whichDesc = which(caseNodes == "desc")#
		whichTests = which(caseNodes == "test")#
		whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
		#
		#
		desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
		#If the description is too long truncate it#
		if ( nchar(desc) > getOption("width") ) {#
			desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
		}#
		args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
		#
		#make sure the arg names are lowercase for the sake of consistency#
		names(args) = sapply(names(args),tolower) #
		#
		test_that(desc, {#
		#
			for ( j in whichTests ) {#
				#
				expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
				expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
				#
				if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
			#
					opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
					opReturn = xmlValue( x[[i]][[j]][[1]] )#
				    opNArgs = length(opAttrs)-1#
                    #
					funcName = paste("RGEOS",opAttrs[['name']],sep='') #
					funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
					#
					if ( !is.function(funcPtr) ) {#
						funcPtr = function(...) {}#
						funcNArgs = 0#
					} else {#
					    funcNArgs = length( formals(funcPtr) )#
					}#
				#
					expect_that(funcNArgs, equals( opNArgs ))#
					#
					if (funcNArgs > 0) {#
						funcArgs = list()#
						for (argi in 1:funcNArgs) {#
							#
							argName = opAttrs[[ paste("arg",argi,sep='') ]]#
							#
							if ( tolower(argName) %in% names(args) ) {#
								funcArgs[[argi]] = args[[ tolower(argName) ]]#
							} else {#
								funcArgs[[argi]] = argName#
							}#
			#
						}#
						#
						funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
						#
					} #
				}				#
			} #
		})#
		#break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos") )	#
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile) {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(f)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
    nodes = xmlSApply(x,xmlName)#
#
    #Handle precisionModel nodes - only use the first model#
    test_that("precisionModel attribute tests", {#
#
        pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
        expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
#
        if (length(pmAttrs) == 1) {#
            type = pmAttrs[["type"]]#
        } else if (length(pmAttrs) == 3) {#
            setScale(as.numeric( pmAttrs[["scale"]] ))#
#
            expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
            expect_that( pmAttrs[["offsety"]], equals("0.0") )#
        } #
    })#
#
    #Handle case nodes#
    for ( i in which(nodes == "case") ) {#
        caseNodes = xmlSApply(x[[i]],xmlName)#
        #
        whichDesc = which(caseNodes == "desc")#
        whichTests = which(caseNodes == "test")#
        whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
        #
        #
        desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
        #If the description is too long truncate it#
        if ( nchar(desc) > getOption("width") ) {#
            desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
        }#
        args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
        #
        #make sure the arg names are lowercase for the sake of consistency#
        names(args) = sapply(names(args),tolower) #
        #
        test_that(desc, {#
        #
            for ( j in whichTests ) {#
                #
                expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
                #
                if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
            #
                    opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                    opReturn = xmlValue( x[[i]][[j]][[1]] )#
                    opNArgs = length(opAttrs)-1#
                    #
                    funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                    funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
                    #
                    if ( !is.function(funcPtr) ) {#
                        funcPtr = function(...) {}#
                        funcNArgs = 0#
                    } else {#
                        funcNArgs = length( formals(funcPtr) )#
                    }#
                #
                    expect_that(funcNArgs, equals( opNArgs ))#
                    #
                    if (funcNArgs > 0) {#
                        funcArgs = list()#
                        for (argi in 1:funcNArgs) {#
                            #
                            argName = opAttrs[[ paste("arg",argi,sep='') ]]#
                            #
                            if ( tolower(argName) %in% names(args) ) {#
                                funcArgs[[argi]] = args[[ tolower(argName) ]]#
                            } else {#
                                funcArgs[[argi]] = argName#
                            }#
            #
                        }#
                        #
                        funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
                        #
                    } #
                }                #
            } #
        })#
        #break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos") )    #
}
test_dir("/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests", SummaryByContextReporter)
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/tests')
library(testthat)#
#
#current version of testthat doesn't play nice with R.app GUI#
#monkeypatch colourise to fix it#
#
colouriseFix <- function(text, fg = "black", bg = NULL) {#
    term <- Sys.getenv()["TERM"]#
    colour_terms <- c("xterm-color", "screen")#
#
    if (!any(term %in% colour_terms, na.rm = TRUE)) {#
        return(text)#
    }#
#
    if ("R_GUI_APP_VERSION" %in% names(Sys.getenv())) {#
        return(text)#
    }#
#
    col_escape <- function(col) {#
        paste("\033[", col, "m", sep = "")#
    }#
#
    col <- .fg_colours[tolower(fg)]#
    if (!is.null(bg)) {#
        col <- paste(col, .bg_colours[tolower(bg)], sep = ";")#
    }#
#
    init <- col_escape(col)#
    reset <- col_escape("0")#
    paste(init, text, reset, sep = "")#
}#
assign("colourise", colouriseFix, envir = as.environment("package:testthat"))#
#
SummaryByContextReporter <- Reporter$clone()#
SummaryByContextReporter$do({#
    labels <- c(1:9, letters, LETTERS)#
  #
    self$start_context <- function(desc) {#
        charrep <- function(char, times) {#
            sapply(times, function(i) paste(rep.int(char, i), collapse = ""))#
        }#
        #
        line = charrep("-",getOption("width"))#
        cat(line, "\n")#
        cat(desc, ": \n", sep = "")#
        cat(line)#
        #
        self$failures <- list()#
        self$n <- 0#
    }#
  #
    self$end_context <- function() {#
        cat("\n")#
    #
        charrep <- function(char, times) {#
            sapply(times, function(i) paste(rep.int(char, i), collapse = ""))#
        }#
    #
        if (self$n != 0) {#
        #
            label <- labels[seq_len(self$n)]#
            type <- ifelse(sapply(self$failures, "[[", "error"), "Error", "Failure")#
            tests <- sapply(self$failures, "[[", "test")#
            header <- paste(label, ". ", type, ": ", tests, " ", sep = "")#
            #
#
            message <- sapply(self$failures, "[[", "message")#
#
            cat("\n")#
            cat(paste(  colourise(header, "red"), "\n", #
                        message, "\n", sep = "", collapse = "\n") )      #
        }#
        cat("\n")#
    }#
  #
    self$start_reporter <- function() {#
        self$failures <- list()#
        self$n <- 0#
    }#
  #
    self$add_result <- function(result) {#
        if (result$passed) {#
            cat(colourise(".", fg = "light green"))#
        } else {#
            self$n <- self$n + 1#
      #
            if (self$n > length(labels)) {#
                self$n <- length(labels)#
                cat(colourise("F", fg = "red"))#
            } else {#
                result$test <- self$test#
                self$failures[[self$n]] <- result#
                cat(colourise(labels[self$n], fg = "red"))#
            } #
        }#
    }#
  #
    self$end_reporter <- function() { self$end_context() }  #
})#
#
#
test_dir(system.file("tests", package = "rgeos"), SummaryByContextReporter)
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/tests')
library(testthat)#
#
#current version of testthat doesn't play nice with R.app GUI#
#monkeypatch colourise to fix it#
#
colouriseFix <- function(text, fg = "black", bg = NULL) {#
    term <- Sys.getenv()["TERM"]#
    colour_terms <- c("xterm-color", "screen")#
#
    if (!any(term %in% colour_terms, na.rm = TRUE)) {#
        return(text)#
    }#
#
    if ("R_GUI_APP_VERSION" %in% names(Sys.getenv())) {#
        return(text)#
    }#
#
    col_escape <- function(col) {#
        paste("\033[", col, "m", sep = "")#
    }#
#
    col <- .fg_colours[tolower(fg)]#
    if (!is.null(bg)) {#
        col <- paste(col, .bg_colours[tolower(bg)], sep = ";")#
    }#
#
    init <- col_escape(col)#
    reset <- col_escape("0")#
    paste(init, text, reset, sep = "")#
}#
assign("colourise", colouriseFix, envir = as.environment("package:testthat"))#
#
SummaryByContextReporter <- Reporter$clone()#
SummaryByContextReporter$do({#
    labels <- c(1:9, letters, LETTERS)#
  #
    self$start_context <- function(desc) {#
        charrep <- function(char, times) {#
            sapply(times, function(i) paste(rep.int(char, i), collapse = ""))#
        }#
        #
        line = charrep("-",getOption("width"))#
        cat(line, "\n")#
        cat(desc, ": \n", sep = "")#
        cat(line, "\n")#
        #
        self$failures <- list()#
        self$n <- 0#
    }#
  #
    self$end_context <- function() {#
        cat("\n")#
    #
        charrep <- function(char, times) {#
            sapply(times, function(i) paste(rep.int(char, i), collapse = ""))#
        }#
    #
        if (self$n != 0) {#
        #
            label <- labels[seq_len(self$n)]#
            type <- ifelse(sapply(self$failures, "[[", "error"), "Error", "Failure")#
            tests <- sapply(self$failures, "[[", "test")#
            header <- paste(label, ". ", type, ": ", tests, " ", sep = "")#
            #
#
            message <- sapply(self$failures, "[[", "message")#
#
            cat("\n")#
            cat(paste(  colourise(header, "red"), "\n", #
                        message, "\n", sep = "", collapse = "\n") )      #
        }#
        cat("\n")#
    }#
  #
    self$start_reporter <- function() {#
        self$failures <- list()#
        self$n <- 0#
    }#
  #
    self$add_result <- function(result) {#
        if (result$passed) {#
            cat(colourise(".", fg = "light green"))#
        } else {#
            self$n <- self$n + 1#
      #
            if (self$n > length(labels)) {#
                self$n <- length(labels)#
                cat(colourise("F", fg = "red"))#
            } else {#
                result$test <- self$test#
                self$failures[[self$n]] <- result#
                cat(colourise(labels[self$n], fg = "red"))#
            } #
        }#
    }#
  #
    self$end_reporter <- function() { self$end_context() }  #
})#
#
#
#test_dir(system.file("tests", package = "rgeos"), SummaryByContextReporter)#
#test_dir("/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests", SummaryByContextReporter)
library(help=stringr)
library(stringr)
?str_sub
str_sub
str_split
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile,filename = "") {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(filename)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
    nodes = xmlSApply(x,xmlName)#
#
    #Handle precisionModel nodes - only use the first model#
    test_that("precisionModel attribute tests", {#
#
        pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
        expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
#
        if (length(pmAttrs) == 1) {#
            type = pmAttrs[["type"]]#
        } else if (length(pmAttrs) == 3) {#
            setScale(as.numeric( pmAttrs[["scale"]] ))#
#
            expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
            expect_that( pmAttrs[["offsety"]], equals("0.0") )#
        } #
    })#
#
    #Handle case nodes#
    for ( i in which(nodes == "case") ) {#
        caseNodes = xmlSApply(x[[i]],xmlName)#
        #
        whichDesc = which(caseNodes == "desc")#
        whichTests = which(caseNodes == "test")#
        whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
        #
        #
        desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
        #If the description is too long truncate it#
        if ( nchar(desc) > getOption("width") ) {#
            desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
        }#
        args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
        #
        #make sure the arg names are lowercase for the sake of consistency#
        names(args) = sapply(names(args),tolower) #
        #
        test_that(desc, {#
        #
            for ( j in whichTests ) {#
                #
                expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
                #
                if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
            #
                    opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                    opReturn = xmlValue( x[[i]][[j]][[1]] )#
                    opNArgs = length(opAttrs)-1#
                    #
                    funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                    funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
                    #
                    if ( !is.function(funcPtr) ) {#
                        funcPtr = function(...) {}#
                        funcNArgs = 0#
                    } else {#
                        funcNArgs = length( formals(funcPtr) )#
                    }#
                #
                    expect_that(funcNArgs, equals( opNArgs ))#
                    #
                    if (funcNArgs > 0) {#
                        funcArgs = list()#
                        for (argi in 1:funcNArgs) {#
                            #
                            argName = opAttrs[[ paste("arg",argi,sep='') ]]#
                            #
                            if ( tolower(argName) %in% names(args) ) {#
                                funcArgs[[argi]] = args[[ tolower(argName) ]]#
                            } else {#
                                funcArgs[[argi]] = argName#
                            }#
            #
                        }#
                        #
                        funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
                        #
                    } #
                }                #
            } #
        })#
        #break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos"), f )    #
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile,filename = "") {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(filename)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
    nodes = xmlSApply(x,xmlName)#
    #
    print(x)#
#
    #Handle precisionModel nodes - only use the first model#
    test_that("precisionModel attribute tests", {#
#
        pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
        expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
#
        if (length(pmAttrs) == 1) {#
            type = pmAttrs[["type"]]#
        } else if (length(pmAttrs) == 3) {#
            setScale(as.numeric( pmAttrs[["scale"]] ))#
#
            expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
            expect_that( pmAttrs[["offsety"]], equals("0.0") )#
        } #
    })#
#
    #Handle case nodes#
    for ( i in which(nodes == "case") ) {#
        caseNodes = xmlSApply(x[[i]],xmlName)#
        #
        whichDesc = which(caseNodes == "desc")#
        whichTests = which(caseNodes == "test")#
        whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
        #
        #
        desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
        #If the description is too long truncate it#
        if ( nchar(desc) > getOption("width") ) {#
            desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
        }#
        args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
        #
        #make sure the arg names are lowercase for the sake of consistency#
        names(args) = sapply(names(args),tolower) #
        #
        test_that(desc, {#
        #
            for ( j in whichTests ) {#
                #
                expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
                #
                if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
            #
                    opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                    opReturn = xmlValue( x[[i]][[j]][[1]] )#
                    opNArgs = length(opAttrs)-1#
                    #
                    funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                    funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
                    #
                    if ( !is.function(funcPtr) ) {#
                        funcPtr = function(...) {}#
                        funcNArgs = 0#
                    } else {#
                        funcNArgs = length( formals(funcPtr) )#
                    }#
                #
                    expect_that(funcNArgs, equals( opNArgs ))#
                    #
                    if (funcNArgs > 0) {#
                        funcArgs = list()#
                        for (argi in 1:funcNArgs) {#
                            #
                            argName = opAttrs[[ paste("arg",argi,sep='') ]]#
                            #
                            if ( tolower(argName) %in% names(args) ) {#
                                funcArgs[[argi]] = args[[ tolower(argName) ]]#
                            } else {#
                                funcArgs[[argi]] = argName#
                            }#
            #
                        }#
                        #
                        funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
                        #
                    } #
                }                #
            } #
        })#
        #break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos"), f )    #
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile,filename = "") {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(filename)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
    nodes = xmlSApply(x,xmlName)#
    #
    print(x)#
#
    #Handle precisionModel nodes - only use the first model#
    #
    pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
    #
    test_that("precisionModel attribute tests", {#
        expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
    })#
    #
    if (length(pmAttrs) == 1) {#
        type = pmAttrs[["type"]]#
    } else if (length(pmAttrs) == 3) {#
        setScale(as.numeric( pmAttrs[["scale"]] ))#
#
        expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
        expect_that( pmAttrs[["offsety"]], equals("0.0") )#
    } #
    #
#
    #Handle case nodes#
    for ( i in which(nodes == "case") ) {#
        caseNodes = xmlSApply(x[[i]],xmlName)#
        #
        whichDesc = which(caseNodes == "desc")#
        whichTests = which(caseNodes == "test")#
        whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
        #
        #
        desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
        #If the description is too long truncate it#
        if ( nchar(desc) > getOption("width") ) {#
            desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
        }#
        args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
        #
        #make sure the arg names are lowercase for the sake of consistency#
        names(args) = sapply(names(args),tolower) #
        #
        test_that(desc, {#
        #
            for ( j in whichTests ) {#
                #
                expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
                #
                if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
            #
                    opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                    opReturn = xmlValue( x[[i]][[j]][[1]] )#
                    opNArgs = length(opAttrs)-1#
                    #
                    funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                    funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
                    #
                    if ( !is.function(funcPtr) ) {#
                        funcPtr = function(...) {}#
                        funcNArgs = 0#
                    } else {#
                        funcNArgs = length( formals(funcPtr) )#
                    }#
                #
                    expect_that(funcNArgs, equals( opNArgs ))#
                    #
                    if (funcNArgs > 0) {#
                        funcArgs = list()#
                        for (argi in 1:funcNArgs) {#
                            #
                            argName = opAttrs[[ paste("arg",argi,sep='') ]]#
                            #
                            if ( tolower(argName) %in% names(args) ) {#
                                funcArgs[[argi]] = args[[ tolower(argName) ]]#
                            } else {#
                                funcArgs[[argi]] = argName#
                            }#
            #
                        }#
                        #
                        funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
                        #
                    } #
                }                #
            } #
        })#
        #break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos"), f )    #
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile,filename = "") {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(filename)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
    nodes = xmlSApply(x,xmlName)#
    #
    print(x)#
#
    #Handle precisionModel nodes - only use the first model#
    #
    pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
    #
    #test_that("precisionModel attribute tests", {#
    #   expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
    #})#
    #
    if (length(pmAttrs) == 1) {#
        type = pmAttrs[["type"]]#
    } else if (length(pmAttrs) == 3) {#
        setScale(as.numeric( pmAttrs[["scale"]] ))#
#
        expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
        expect_that( pmAttrs[["offsety"]], equals("0.0") )#
    } #
    #
#
    #Handle case nodes#
    for ( i in which(nodes == "case") ) {#
        caseNodes = xmlSApply(x[[i]],xmlName)#
        #
        whichDesc = which(caseNodes == "desc")#
        whichTests = which(caseNodes == "test")#
        whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
        #
        #
        desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
        #If the description is too long truncate it#
        if ( nchar(desc) > getOption("width") ) {#
            desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
        }#
        args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
        #
        #make sure the arg names are lowercase for the sake of consistency#
        names(args) = sapply(names(args),tolower) #
        #
        test_that(desc, {#
        #
            for ( j in whichTests ) {#
                #
                expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
                #
                if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
            #
                    opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                    opReturn = xmlValue( x[[i]][[j]][[1]] )#
                    opNArgs = length(opAttrs)-1#
                    #
                    funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                    funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
                    #
                    if ( !is.function(funcPtr) ) {#
                        funcPtr = function(...) {}#
                        funcNArgs = 0#
                    } else {#
                        funcNArgs = length( formals(funcPtr) )#
                    }#
                #
                    expect_that(funcNArgs, equals( opNArgs ))#
                    #
                    if (funcNArgs > 0) {#
                        funcArgs = list()#
                        for (argi in 1:funcNArgs) {#
                            #
                            argName = opAttrs[[ paste("arg",argi,sep='') ]]#
                            #
                            if ( tolower(argName) %in% names(args) ) {#
                                funcArgs[[argi]] = args[[ tolower(argName) ]]#
                            } else {#
                                funcArgs[[argi]] = argName#
                            }#
            #
                        }#
                        #
                        funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
                        #
                    } #
                }                #
            } #
        })#
        #break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos"), f )    #
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
#
parseXMLFile = function(xmlfile,filename = "") {#
    nodeTypes = c("precisionModel","case","comment")#
    #
    context(filename)#
    #
    x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
    nodes = xmlSApply(x,xmlName)#
    #
    #Handle precisionModel nodes - only use the first model#
    #
    pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
    #
    #test_that("precisionModel attribute tests", {#
    #   expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
    #})#
    #
    if (length(pmAttrs) == 1) {#
        type = pmAttrs[["type"]]#
    } else if (length(pmAttrs) == 3) {#
        setScale(as.numeric( pmAttrs[["scale"]] ))#
#
        expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
        expect_that( pmAttrs[["offsety"]], equals("0.0") )#
    } #
    #
#
    #Handle case nodes#
    for ( i in which(nodes == "case") ) {#
        caseNodes = xmlSApply(x[[i]],xmlName)#
        #
        whichDesc = which(caseNodes == "desc")#
        whichTests = which(caseNodes == "test")#
        whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
        #
        #
        desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
        #If the description is too long truncate it#
        if ( nchar(desc) > getOption("width") ) {#
            desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
        }#
        args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
        #
        #make sure the arg names are lowercase for the sake of consistency#
        names(args) = sapply(names(args),tolower) #
        #
        test_that(desc, {#
        #
            for ( j in whichTests ) {#
                #
                expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
                #
                if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
            #
                    opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                    opReturn = xmlValue( x[[i]][[j]][[1]] )#
                    opNArgs = length(opAttrs)-1#
                    #
                    funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                    funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
                    #
                    if ( !is.function(funcPtr) ) {#
                        funcPtr = function(...) {}#
                        funcNArgs = 0#
                    } else {#
                        funcNArgs = length( formals(funcPtr) )#
                    }#
                #
                    expect_that(funcNArgs, equals( opNArgs ))#
                    #
                    if (funcNArgs > 0) {#
                        funcArgs = list()#
                        for (argi in 1:funcNArgs) {#
                            #
                            argName = opAttrs[[ paste("arg",argi,sep='') ]]#
                            #
                            if ( tolower(argName) %in% names(args) ) {#
                                funcArgs[[argi]] = args[[ tolower(argName) ]]#
                            } else {#
                                funcArgs[[argi]] = argName#
                            }#
            #
                        }#
                        #
                        funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
                        #
                    } #
                }                #
            } #
        })#
        #break#
    }#
}#
#
#
#
#
#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        parseXMLFile( system.file(file.path(xmldir,d,f),package="rgeos"), f )    #
}
test_that
?test_that
nargs()
nargs
?.Primitive
?environment
?parent.env
function() {ls(as.environment(-1))}
function() {ls(as.environment(-1))}()
x=function() {ls(as.environment(-1))}
x()
ls()
x=function() {a=1;ls(as.environment(-1))}
x()
ls(as.environment(-1))
ls(as.environment(x))
ls(as.environment(1))
ls(as.environment(2))
ls(as.environment(3))
ls(as.environment(4))
ls(as.environment(5))
ls(as.environment(7))
ls(as.environment(8))
ls(as.environment(9))
ls(as.environment(10))
ls(as.environment(11))
ls(as.environment(12))
ls(as.environment(13))
ls(as.environment(15))
ls(as.environment(18))
ls(as.environment(20))
ls(as.environment(19))
objects(env=environment(x),all=TRUE)
x
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
nodeTypes = c("precisionModel","case","comment")#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        xmlfile =  system.file(file.path(xmldir,d,f),package="rgeos")  #
#
#
        context(filename)#
#
        x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
        nodes = xmlSApply(x,xmlName)#
#
        #Handle precisionModel nodes - only use the first model#
#
        pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
#
        test_that("precisionModel attribute tests", {#
            expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
        #
            if (length(pmAttrs) == 1) {#
                type = pmAttrs[["type"]]#
            } else if (length(pmAttrs) == 3) {#
                setScale(as.numeric( pmAttrs[["scale"]] ))#
#
                expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
                expect_that( pmAttrs[["offsety"]], equals("0.0") )#
            } #
        })#
#
        #Handle case nodes#
        for ( i in which(nodes == "case") ) {#
            caseNodes = xmlSApply(x[[i]],xmlName)#
#
            whichDesc = which(caseNodes == "desc")#
            whichTests = which(caseNodes == "test")#
            whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
#
#
            desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
            #If the description is too long truncate it#
            if ( nchar(desc) > getOption("width") ) {#
                desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
            }#
            args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
#
            #make sure the arg names are lowercase for the sake of consistency#
            names(args) = sapply(names(args),tolower) #
#
            test_that(desc, {#
#
                for ( j in whichTests ) {#
#
                    expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                    expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
#
                    if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
#
                        opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                        opReturn = xmlValue( x[[i]][[j]][[1]] )#
                        opNArgs = length(opAttrs)-1#
#
                        funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                        funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
#
                        if ( !is.function(funcPtr) ) {#
                            funcPtr = function(...) {}#
                            funcNArgs = 0#
                        } else {#
                            funcNArgs = length( formals(funcPtr) )#
                        }#
#
                        expect_that(funcNArgs, equals( opNArgs ))#
#
                        if (funcNArgs > 0) {#
                            funcArgs = list()#
                            for (argi in 1:funcNArgs) {#
#
                                argName = opAttrs[[ paste("arg",argi,sep='') ]]#
#
                                if ( tolower(argName) %in% names(args) ) {#
                                    funcArgs[[argi]] = args[[ tolower(argName) ]]#
                                } else {#
                                    funcArgs[[argi]] = argName#
                                }#
#
                            }#
#
                            funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
#
                        } #
                    }                #
                } #
            })#
            #break#
        }#
    }#
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
nodeTypes = c("precisionModel","case","comment")#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  #
        xmlfile =  system.file(file.path(xmldir,d,f),package="rgeos")  #
#
        context(f)#
        x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
        nodes = xmlSApply(x,xmlName)#
#
        #Handle precisionModel nodes - only use the first model#
#
        pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
#
        test_that("precisionModel attribute tests", {#
            expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
        #
            if (length(pmAttrs) == 1) {#
                type = pmAttrs[["type"]]#
            } else if (length(pmAttrs) == 3) {#
                setScale(as.numeric( pmAttrs[["scale"]] ))#
#
                expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
                expect_that( pmAttrs[["offsety"]], equals("0.0") )#
            } #
        })#
#
        #Handle case nodes#
        for ( i in which(nodes == "case") ) {#
            caseNodes = xmlSApply(x[[i]],xmlName)#
#
            whichDesc = which(caseNodes == "desc")#
            whichTests = which(caseNodes == "test")#
            whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
#
#
            desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
            #If the description is too long truncate it#
            if ( nchar(desc) > getOption("width") ) {#
                desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
            }#
            args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
#
            #make sure the arg names are lowercase for the sake of consistency#
            names(args) = sapply(names(args),tolower) #
#
            test_that(desc, {#
#
                for ( j in whichTests ) {#
#
                    expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                    expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
#
                    if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
#
                        opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                        opReturn = xmlValue( x[[i]][[j]][[1]] )#
                        opNArgs = length(opAttrs)-1#
#
                        funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                        funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
#
                        if ( !is.function(funcPtr) ) {#
                            funcPtr = function(...) {}#
                            funcNArgs = 0#
                        } else {#
                            funcNArgs = length( formals(funcPtr) )#
                        }#
#
                        expect_that(funcNArgs, equals( opNArgs ))#
#
                        if (funcNArgs > 0) {#
                            funcArgs = list()#
                            for (argi in 1:funcNArgs) {#
#
                                argName = opAttrs[[ paste("arg",argi,sep='') ]]#
#
                                if ( tolower(argName) %in% names(args) ) {#
                                    funcArgs[[argi]] = args[[ tolower(argName) ]]#
                                } else {#
                                    funcArgs[[argi]] = argName#
                                }#
#
                            }#
#
                            funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
#
                        } #
                    }                #
                } #
            })#
            #break#
        }#
    }#
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests')
library(testthat)#
library(XML)#
#
nodeTypes = c("precisionModel","case","comment")#
#
xmldir = 'tests/testxml'#
testdirs = list.files(system.file(xmldir,package="rgeos"))#
#
for (d in testdirs) {#
    testfiles = list.files(system.file(file.path(xmldir,d),package="rgeos")) #
    #
    for (f in testfiles)  {#
        xmlfile =  system.file(file.path(xmldir,d,f),package="rgeos")#
#
        context(f)#
        x = xmlRoot(xmlTreeParse(xmlfile,ignoreBlanks=TRUE))#
        nodes = xmlSApply(x,xmlName)#
#
        #Handle precisionModel nodes - only use the first model#
#
        pmAttrs =  xmlAttrs( x[[ which(nodes == "precisionModel")[1] ]] )#
#
        test_that("precisionModel attribute tests", {#
            expect_that( length(pmAttrs) == 1 | length(pmAttrs) == 3, is_true() )#
        #
            if (length(pmAttrs) == 1) {#
                type = pmAttrs[["type"]]#
            } else if (length(pmAttrs) == 3) {#
                setScale(as.numeric( pmAttrs[["scale"]] ))#
#
                expect_that( pmAttrs[["offsetx"]], equals("0.0") )#
                expect_that( pmAttrs[["offsety"]], equals("0.0") )#
            } #
        })#
#
        #Handle case nodes#
        for ( i in which(nodes == "case") ) {#
            caseNodes = xmlSApply(x[[i]],xmlName)#
#
            whichDesc = which(caseNodes == "desc")#
            whichTests = which(caseNodes == "test")#
            whichArgs = which(caseNodes != "desc" & caseNodes != "test")#
#
#
            desc = xmlValue( x[[i]][[ whichDesc[1] ]] )#
            #If the description is too long truncate it#
            if ( nchar(desc) > getOption("width") ) {#
                desc = paste( strtrim(desc, getOption("width")-25 ), "...")#
            }#
            args = xmlSApply( x[[i]], xmlValue )[whichArgs]#
#
            #make sure the arg names are lowercase for the sake of consistency#
            names(args) = sapply(names(args),tolower) #
#
            test_that(desc, {#
#
                for ( j in whichTests ) {#
#
                    expect_that( xmlSize( x[[i]][[j]] ), equals(1) )#
                    expect_that( xmlName( x[[i]][[j]][[1]] ), equals("op") )#
#
                    if ( xmlSize( x[[i]][[j]] ) == 1 & xmlName( x[[i]][[j]][[1]] ) == "op" ) {#
#
                        opAttrs = xmlAttrs( x[[i]][[j]][[1]] )#
                        opReturn = xmlValue( x[[i]][[j]][[1]] )#
                        opNArgs = length(opAttrs)-1#
#
                        funcName = paste("RGEOS",opAttrs[['name']],sep='') #
                        funcPtr = try( get(funcName,envir=as.environment("package:rgeos")), TRUE )#
#
                        if ( !is.function(funcPtr) ) {#
                            funcPtr = function(...) {}#
                            funcNArgs = 0#
                        } else {#
                            funcNArgs = length( formals(funcPtr) )#
                        }#
#
                        expect_that(funcNArgs, equals( opNArgs ))#
#
                        if (funcNArgs > 0) {#
                            funcArgs = list()#
                            for (argi in 1:funcNArgs) {#
#
                                argName = opAttrs[[ paste("arg",argi,sep='') ]]#
#
                                if ( tolower(argName) %in% names(args) ) {#
                                    funcArgs[[argi]] = args[[ tolower(argName) ]]#
                                } else {#
                                    funcArgs[[argi]] = argName#
                                }#
#
                            }#
#
                            funcReturn = do.call(funcPtr, funcArgs, envir=as.environment("package:rgeos"))#
#
                        } #
                    }                #
                } #
            })#
            #break#
        }#
    }#
}
setwd('/Users/rundel/Desktop/Summer of Code/rgeos/pkg/tests')
library(testthat)#
#
#current version of testthat doesn't play nice with R.app GUI#
#monkeypatch colourise to fix it#
#
colouriseFix <- function(text, fg = "black", bg = NULL) {#
    term <- Sys.getenv()["TERM"]#
    colour_terms <- c("xterm-color", "screen")#
#
    if (!any(term %in% colour_terms, na.rm = TRUE)) {#
        return(text)#
    }#
#
    if ("R_GUI_APP_VERSION" %in% names(Sys.getenv())) {#
        return(text)#
    }#
#
    col_escape <- function(col) {#
        paste("\033[", col, "m", sep = "")#
    }#
#
    col <- .fg_colours[tolower(fg)]#
    if (!is.null(bg)) {#
        col <- paste(col, .bg_colours[tolower(bg)], sep = ";")#
    }#
#
    init <- col_escape(col)#
    reset <- col_escape("0")#
    paste(init, text, reset, sep = "")#
}#
assign("colourise", colouriseFix, envir = as.environment("package:testthat"))#
#
SummaryByContextReporter <- Reporter$clone()#
SummaryByContextReporter$do({#
    labels <- c(1:9, letters, LETTERS)#
  #
    self$start_context <- function(desc) {#
        charrep <- function(char, times) {#
            sapply(times, function(i) paste(rep.int(char, i), collapse = ""))#
        }#
        #
        line = charrep("-",getOption("width"))#
        cat(line, "\n")#
        cat(desc, ": \n", sep = "")#
        cat(line, "\n")#
        #
        self$failures <- list()#
        self$n <- 0#
    }#
  #
    self$end_context <- function() {#
        cat("\n")#
    #
        charrep <- function(char, times) {#
            sapply(times, function(i) paste(rep.int(char, i), collapse = ""))#
        }#
    #
        if (self$n != 0) {#
        #
            label <- labels[seq_len(self$n)]#
            type <- ifelse(sapply(self$failures, "[[", "error"), "Error", "Failure")#
            tests <- sapply(self$failures, "[[", "test")#
            header <- paste(label, ". ", type, ": ", tests, " ", sep = "")#
            #
#
            message <- sapply(self$failures, "[[", "message")#
#
            cat("\n")#
            cat(paste(  colourise(header, "red"), "\n", #
                        message, "\n", sep = "", collapse = "\n") )      #
        }#
        cat("\n")#
    }#
  #
    self$start_reporter <- function() {#
        self$failures <- list()#
        self$n <- 0#
    }#
  #
    self$add_result <- function(result) {#
        if (result$passed) {#
            cat(colourise(".", fg = "light green"))#
        } else {#
            self$n <- self$n + 1#
      #
            if (self$n > length(labels)) {#
                self$n <- length(labels)#
                cat(colourise("F", fg = "red"))#
            } else {#
                result$test <- self$test#
                self$failures[[self$n]] <- result#
                cat(colourise(labels[self$n], fg = "red"))#
            } #
        }#
    }#
  #
    self$end_reporter <- function() { self$end_context() }  #
})#
#
#
#test_dir(system.file("tests", package = "rgeos"), SummaryByContextReporter)#
#test_dir("/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests", SummaryByContextReporter)
test_dir("/Users/rundel/Desktop/Summer of Code/rgeos/pkg/inst/tests", SummaryByContextReporter)
get(funcName,envir=as.environment("package:rgeos"))
get("RGEOSisValid",envir=as.environment("package:rgeos"))
ls(envir=as.environment("package:rgeos"))
